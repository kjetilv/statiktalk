package com.github.kjetilv.statiktalk.templates

import com.github.kjetilv.statiktalk.KMessage
import com.github.kjetilv.statiktalk.KService
import com.github.kjetilv.statiktalk.st.source

object ReceiverTemplate {

    private val receiverTemplate
        get() =
            """
@file:Suppress("unused", "UNUSED_PARAMETER", "KotlinRedundantDiagnosticSuppress", "UnusedImport")

package 《s.packidge》

《imports:{import|
import 《import》
} 》
import com.github.kjetilv.statiktalk.api.ReceiveMediatorBase
import 《s.sourcePackidge》.《s.service》

import com.fasterxml.jackson.databind.JsonNode
import no.nav.helse.rapids_rivers.JsonMessage
import no.nav.helse.rapids_rivers.MessageContext
import no.nav.helse.rapids_rivers.RapidsConnection

/*
  This file was generated by statiktalk. Changes will be reverted when you rebuild.
  《if(debug) 》
    
    Imports: 《imports:{import| 《import》 }》
    
    Message:
《ms:{m|
      《m》
}》
    Service: 《s》
    《endif》
*/

fun RapidsConnection.handle《s.service》(
    《s.serviceCc》: 《s.service》,
    eventName: String? = null,
《if(ps)》
    reqs: 《s.service》Reqs? = null,    
《endif》
    vararg additionalKeys: String
) {
《ms:{m|
    《s.service》ReceiveMediator《m.upcasedServiceName》(《s.serviceCc》)
        .listenTo(
            this,
            eventName, 
《if(ps)》
            reqs,    
《endif》
            additionalKeys.toList()
        )
}》}

《if(ps)》
data class 《s.service》Reqs(
《ps:{p|
  val 《p.name》: 《p.type》? = null, 
}》
)
《endif》

《ms:{m|

private class 《s.service》ReceiveMediator《m.upcasedServiceName》(
    private val 《s.serviceCc》: 《s.service》
) : ReceiveMediatorBase() {

    fun listenTo(
        connection: RapidsConnection,
        eventName: String? = null, 
《if(ps)》
        reqs: 《s.service》Reqs? = null,    
《endif》
        additionalKeys: List<String>
    ) {
        val requiredKeys = 《if(m.hasRequiredKeys)》listOf(《m.requiredKeys:{requiredKey|
            
            "《requiredKey.name》",}》
        )
        《else》
            emptyList<String>()
        《endif》
        val interestingKeys = 《if(m.hasInterestingKeys)》listOf(《m.interestingKeys:{interestingKey|
            
            "《interestingKey.name》",}》
        )
        《else》
            emptyList<String>()
        《endif》
        connection.listen(
            eventName《if(m.eventName)》 ?: "《m.eventName》"《endif》, 
            requiredKeys = requiredKeys,
            《if(ps)》
            requiredValues = mapOf(
《ps:{p|
                "《p.name》" to reqs?.《p.name》, 
}》
            ),
            《else》
            requiredValues = emptyMap(), 
            《endif》
            interestingKeys = interestingKeys,
            additionalKeys = additionalKeys)
    \}

    @Suppress("RedundantNullableReturnType", "RedundantSuppression")
    override fun onPacket(packet: JsonMessage, context: MessageContext) {
《m.requiredKeys:{requiredKey|
        val 《requiredKey.name》: 《requiredKey.type》 = 
            packet.resolveRequired("《requiredKey.name》", JsonNode::《requiredKey.jsonType》)
}》 
《m.interestingKeys:{interestingKey|
        val 《interestingKey.name》: 《interestingKey.type》? = 
            packet.resolve("《interestingKey.name》", JsonNode::《interestingKey.jsonType》)
}》
        《s.serviceCc》.《m.serviceName》(
《m.keys:{key|
            《key.name》, 
}》《if(m.contextual)》            context(packet, context)
        《else》《endif》        )
    \}
\}

}》
""".trimIndent()

    internal fun source(service: KService, messages: List<KMessage>) = receiverTemplate.source(service, messages)
}
