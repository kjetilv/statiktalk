package com.github.kjetilv.statiktalk

internal val receiverTemplate
    get() =
        """
package 〔s.packidge〕

import com.github.kjetilv.statiktalk.api.ReceiveMediatorBase
import 〔s.sourcePackidge〕.〔s.service〕

import no.nav.helse.rapids_rivers.JsonMessage
import no.nav.helse.rapids_rivers.MessageContext
import no.nav.helse.rapids_rivers.RapidsConnection

/*
  This file was generated by statiktalk. Changes will be reverted when you rebuild.
  〔if(debug) 〕
    
    Message: 〔m〕
    
    Service: 〔s〕
    〔 endif〕
*/

fun RapidsConnection.handle〔s.service〕(
    〔s.serviceCc〕: 〔s.service〕, 
    vararg interestingKeys: String
) {
    〔s.service〕ReceiveMediator(〔s.serviceCc〕)
        .listenTo(
            this,
            interestingKeys.toList()
        )
}

private class 〔s.service〕ReceiveMediator(
    private val 〔s.serviceCc〕: 〔s.service〕
) : ReceiveMediatorBase() {

    override fun listenTo(connection: RapidsConnection, optionalKeys: List<String>) {
        val parameters = 〔if(m.hasParams)〕listOf(〔m.parameters:{parameter|
            
            "〔parameter〕",}〕
        )
        〔else〕emptyList<String>()
        〔endif〕
        listen(
            connection, 
            〔if(m.requireServiceName)〕"〔s.service〕_〔m.serviceName〕"〔else〕null〔endif〕, 
            parameters,
            〔if(m.hasAdditionalKeys)〕
            listOf(〔m.additionalKeys:{additionalKey|"〔additionalKey〕", }〕),
            〔else〕
            emptyList(),
            〔endif〕
            optionalKeys)
    }

    override fun onPacket(packet: JsonMessage, context: MessageContext) {
〔m.parameters:{parameter|
        val 〔parameter〕 = packet["〔parameter〕"].textValue()
}〕        〔s.serviceCc〕.〔m.serviceName〕(〔m.parameters:{parameter|〔parameter〕, }〕〔if(m.contextual)〕context(packet, context)〔else〕〔endif〕)
    }
}
""".trimIndent()
