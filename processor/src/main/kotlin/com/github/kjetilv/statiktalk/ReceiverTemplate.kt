package com.github.kjetilv.statiktalk

internal val receiverTemplate
    get() =
        """
package 《s.packidge》

《imports:{import|
import 《import》
} 》
import com.github.kjetilv.statiktalk.api.ReceiveMediatorBase
import 《s.sourcePackidge》.《s.service》

import no.nav.helse.rapids_rivers.JsonMessage
import no.nav.helse.rapids_rivers.MessageContext
import no.nav.helse.rapids_rivers.RapidsConnection

/*
  This file was generated by statiktalk. Changes will be reverted when you rebuild.
  《if(debug) 》
    
    Imports: 《imports:{import| 《import》}》
    
    Message:
《ms:{m|
      《m》
}》
    Service: 《s》
    《 endif》
*/

@Suppress("unused")
fun RapidsConnection.handle《s.service》(
    《s.serviceCc》: 《s.service》, 
    vararg additionalKeys: String
) {
《ms:{m|
    《s.service》ReceiveMediator《m.upcasedServiceName》(《s.serviceCc》)
        .listenTo(
            this,
            additionalKeys.toList()
        )
}》}

《ms:{m|

private class 《s.service》ReceiveMediator《m.upcasedServiceName》(
    private val 《s.serviceCc》: 《s.service》
) : ReceiveMediatorBase() {

    override fun listenTo(connection: RapidsConnection, additionalKeys: List<String>) {
        val requiredKeys = 《if(m.hasRequiredKeys)》listOf(《m.requiredKeys:{requiredKey|
            
            "《requiredKey.name》",}》
        )
        《else》
            emptyList<String>()
        《endif》
        val interestingKeys = 《if(m.hasInterestingKeys)》listOf(《m.interestingKeys:{interestingKey|
            
            "《interestingKey.name》",}》
        )
        《else》
            emptyList<String>()
        《endif》
        listen(
            connection, 
            《if(m.eventName)》"《m.eventName》"《else》null《endif》, 
            requiredKeys,
            《if(m.hasAdditionalKeys)》
            listOf(《m.additionalKeys:{additionalKey|"《additionalKey》", }》),
            《else》
            interestingKeys,
            《endif》
            additionalKeys)
    \}

    @Suppress("RedundantNullableReturnType", "RedundantSuppression")
    override fun onPacket(packet: JsonMessage, context: MessageContext) {
《m.requiredKeys:{requiredKey|
        val 《requiredKey.name》: 《requiredKey.type》 = 
            packet.resolveRequired("《requiredKey.name》", JsonNode::《requiredKey.jsonType》)
}》 
《m.interestingKeys:{interestingKey|
        val 《interestingKey.name》: 《interestingKey.type》? = 
            packet.resolve("《interestingKey.name》", JsonNode::《interestingKey.jsonType》)
}》
        《s.serviceCc》.《m.serviceName》(
《m.keys:{key|
            《key.name》, 
}》《if(m.contextual)》            context(packet, context)
        《else》《endif》        )
    \}
\}

}》
""".trimIndent()
