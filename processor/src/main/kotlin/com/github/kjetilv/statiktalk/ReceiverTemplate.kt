package com.github.kjetilv.statiktalk

internal val receiverTemplate
    get() =
        """
package 〔s.packidge〕

import com.github.kjetilv.statiktalk.api.ReceiveMediatorBase
import 〔s.sourcePackidge〕.〔s.service〕

import no.nav.helse.rapids_rivers.JsonMessage
import no.nav.helse.rapids_rivers.MessageContext
import no.nav.helse.rapids_rivers.RapidsConnection

/*
  This file was generated by statiktalk. Changes will be reverted when you rebuild.
  〔if(debug) 〕
    
    Message: 〔m〕
    
    Service: 〔s〕
    〔 endif〕
*/

@Suppress("unused")
fun RapidsConnection.handle〔s.service〕(
    〔s.serviceCc〕: 〔s.service〕, 
    vararg interestingKeys: String
) {
    〔s.service〕ReceiveMediator(〔s.serviceCc〕)
        .listenTo(
            this,
            interestingKeys.toList()
        )
}

private class 〔s.service〕ReceiveMediator(
    private val 〔s.serviceCc〕: 〔s.service〕
) : ReceiveMediatorBase() {

    override fun listenTo(connection: RapidsConnection, optionalKeys: List<String>) {
        val requiredKeys = 〔if(m.hasRequiredKeys)〕listOf(〔m.requiredKeys:{requiredKey|
            
            "〔requiredKey.name〕",}〕
        )
        〔else〕emptyList<String>()
        〔endif〕
        val interestingKeys = 〔if(m.hasInterestingKeys)〕listOf(〔m.interestingKeys:{interestingKey|
            
            "〔interestingKey.name〕",}〕
        )
        〔else〕emptyList<String>()
        〔endif〕
        listen(
            connection, 
            〔if(m.requireEventName)〕"〔s.service〕_〔m.serviceName〕"〔else〕null〔endif〕, 
            requiredKeys,
            〔if(m.hasAdditionalKeys)〕
            listOf(〔m.additionalKeys:{additionalKey|"〔additionalKey〕", }〕),
            〔else〕
            interestingKeys,
            〔endif〕
            optionalKeys)
    }

    override fun onPacket(packet: JsonMessage, context: MessageContext) {
〔m.requiredKeys:{requiredKey|
        val 〔requiredKey.name〕: 〔requiredKey.type〕 = packet["〔requiredKey.name〕"].textValue()
}〕 
〔m.interestingKeys:{interestingKey|
        val 〔interestingKey.name〕: 〔interestingKey.type〕? = packet.get("〔interestingKey.name〕").textValue()
}〕
        〔s.serviceCc〕.〔m.serviceName〕(〔m.keys:{key|〔key.name〕, }〕〔if(m.contextual)〕context(packet, context)〔else〕〔endif〕)
    }
}
""".trimIndent()
